# Copyright 2016 The WebRTC project authors. All Rights Reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS.  All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

import("../webrtc.gni")
if (is_ios) {
  import("//build/config/ios/ios_sdk.gni")
  import("//build/config/ios/rules.gni")
}
if (is_mac) {
  import("//build/config/mac/rules.gni")
}

group("sdk") {
  public_deps = []
  if (!build_with_chromium) {
    if (is_android) {
      public_deps += [ "android" ]
    }
    if (is_ios) {
      public_deps += [ ":framework_objc" ]
    }
  }
}

rtc_source_set("media_constraints") {
  sources = [
    "media_constraints.cc",
    "media_constraints.h",
  ]
  deps = [
    "../api:audio_options_api",
    "../api:libjingle_peerconnection_api",
    "//third_party/abseil-cpp/absl/types:optional",
  ]
}

rtc_source_set("sdk_tests") {
  testonly = true
  sources = [
    "media_constraints_unittest.cc",
  ]
  deps = [
    ":media_constraints",
    "../test:test_support",
  ]
}

if (is_ios || is_mac) {
  config("common_config_objc") {
    include_dirs = [
      "objc",

      # This is needed so that framework headers can include base headers
      # without pathname (so it works from within the framework module).
      "objc/base",

      # This is here for backward compatiblity reasons.
      "objc/Framework/Headers",  # TODO(bugs.webrtc.org/9627): Remove this.
    ]
    cflags = [
      "-Wimplicit-retain-self",
      "-Wstrict-overflow",
      "-Wmissing-field-initializers",
    ]

    if (use_clang_coverage) {
      configs = [ "//build/config/coverage:default_coverage" ]
    }
  }

  config("used_from_extension") {
    if (is_ios && rtc_apprtcmobile_broadcast_extension) {
      cflags = [ "-fapplication-extension" ]
    }
  }

  # TODO(bugs.webrtc.org/9627): Remove this when unused. Targets should depend on base_objc
  # or helpers_objc directly instead.
  rtc_static_library("common_objc") {
    visibility = [ "*" ]

    sources = [
      "objc/helpers/noop.mm",
    ]

    public_configs = [ ":common_config_objc" ]

    deps = [
      ":base_objc",
      ":helpers_objc",
    ]
  }

  rtc_static_library("base_objc") {
    visibility = [ "*" ]
    sources = [
      "objc/base/SLRRTCCodecSpecificInfo.h",
      "objc/base/SLRRTCEncodedImage.h",
      "objc/base/SLRRTCEncodedImage.m",
      "objc/base/SLRRTCI420Buffer.h",
      "objc/base/SLRRTCLogging.h",
      "objc/base/SLRRTCLogging.mm",
      "objc/base/SLRRTCMacros.h",
      "objc/base/SLRRTCMutableI420Buffer.h",
      "objc/base/SLRRTCMutableYUVPlanarBuffer.h",
      "objc/base/SLRRTCRtpFragmentationHeader.h",
      "objc/base/SLRRTCRtpFragmentationHeader.m",
      "objc/base/SLRRTCVideoCapturer.h",
      "objc/base/SLRRTCVideoCapturer.m",
      "objc/base/SLRRTCVideoCodecInfo.h",
      "objc/base/SLRRTCVideoCodecInfo.m",
      "objc/base/SLRRTCVideoDecoder.h",
      "objc/base/SLRRTCVideoDecoderFactory.h",
      "objc/base/SLRRTCVideoEncoder.h",
      "objc/base/SLRRTCVideoEncoderFactory.h",
      "objc/base/SLRRTCVideoEncoderQpThresholds.h",
      "objc/base/SLRRTCVideoEncoderQpThresholds.m",
      "objc/base/SLRRTCVideoEncoderSettings.h",
      "objc/base/SLRRTCVideoEncoderSettings.m",
      "objc/base/SLRRTCVideoFrame.h",
      "objc/base/SLRRTCVideoFrame.mm",
      "objc/base/SLRRTCVideoFrameBuffer.h",
      "objc/base/SLRRTCVideoRenderer.h",
      "objc/base/SLRRTCYUVPlanarBuffer.h",
    ]

    deps = [
      "../rtc_base:checks",
      "../rtc_base:rtc_base",
    ]
    configs += [
      "..:common_objc",
      ":used_from_extension",
    ]

    public_configs = [ ":common_config_objc" ]
  }

  rtc_static_library("helpers_objc") {
    sources = [
      "objc/helpers/AVCaptureSession+DevicePosition.h",
      "objc/helpers/AVCaptureSession+DevicePosition.mm",
      "objc/helpers/NSString+StdString.h",
      "objc/helpers/NSString+StdString.mm",
      "objc/helpers/SLRRTCDispatcher+Private.h",
      "objc/helpers/SLRRTCDispatcher.h",
      "objc/helpers/SLRRTCDispatcher.m",
      "objc/helpers/scoped_cftyperef.h",
    ]

    deps = [
      ":base_objc",
      "../rtc_base:checks",
    ]

    libs = [
      "AVFoundation.framework",
      "CoreMedia.framework",
    ]

    configs += [
      "..:common_objc",
      ":used_from_extension",
    ]

    public_configs = [ ":common_config_objc" ]

    if (is_ios) {
      sources += [
        "objc/helpers/SLRRTCCameraPreviewView.h",
        "objc/helpers/SLRRTCCameraPreviewView.m",
        "objc/helpers/UIDevice+SLRRTCDevice.h",
        "objc/helpers/UIDevice+SLRRTCDevice.mm",
      ]
    }
  }

  if (!build_with_chromium) {
    rtc_static_library("callback_logger_objc") {
      sources = [
        "objc/api/logging/SLRRTCCallbackLogger.h",
        "objc/api/logging/SLRRTCCallbackLogger.mm",
      ]

      deps = [
        ":base_objc",
        "../rtc_base:checks",
        "../rtc_base:logging",
        "../rtc_base:rtc_base",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
    }

    rtc_static_library("file_logger_objc") {
      sources = [
        "objc/api/peerconnection/SLRRTCFileLogger.h",
        "objc/api/peerconnection/SLRRTCFileLogger.mm",
      ]

      deps = [
        ":base_objc",
        "../rtc_base:checks",
        "../rtc_base:logging",
        "../rtc_base:rtc_base",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
    }
  }

  if (!build_with_chromium) {
    if (is_ios) {
      rtc_static_library("native_api_audio_device_module") {
        visibility = [ "*" ]

        sources = [
          "objc/native/api/audio_device_module.h",
          "objc/native/api/audio_device_module.mm",
        ]

        deps = [
          ":audio_device",
          "../modules/audio_device:audio_device_api",
          "../modules/audio_device:audio_device_generic",
          "../rtc_base:checks",
          "../rtc_base:rtc_base_approved",
          "../system_wrappers",
        ]
      }

      rtc_source_set("audio_session_observer") {
        visibility = [ ":*" ]

        sources = [
          "objc/native/src/audio/audio_session_observer.h",
        ]

        deps = [
          "../rtc_base:rtc_base",
        ]
      }

      rtc_static_library("audio_device") {
        visibility = [ "*" ]

        sources = [
          "objc/native/src/audio/audio_device_ios.h",
          "objc/native/src/audio/audio_device_ios.mm",
          "objc/native/src/audio/audio_device_module_ios.h",
          "objc/native/src/audio/audio_device_module_ios.mm",
          "objc/native/src/audio/helpers.h",
          "objc/native/src/audio/helpers.mm",
          "objc/native/src/audio/voice_processing_audio_unit.h",
          "objc/native/src/audio/voice_processing_audio_unit.mm",
        ]

        deps = [
          ":audio_objc",
          ":audio_session_observer",
          ":base_objc",
          "../api:array_view",
          "../modules/audio_device:audio_device_api",
          "../modules/audio_device:audio_device_buffer",
          "../modules/audio_device:audio_device_generic",
          "../rtc_base:checks",
          "../rtc_base:rtc_base",
          "../rtc_base/system:fallthrough",
          "../system_wrappers:metrics",
        ]

        libs = [ "AudioToolbox.framework" ]
      }

      rtc_static_library("audio_objc") {
        sources = [
          "objc/components/audio/SLRRTCAudioSession+Configuration.mm",
          "objc/components/audio/SLRRTCAudioSession+Private.h",
          "objc/components/audio/SLRRTCAudioSession.h",
          "objc/components/audio/SLRRTCAudioSession.mm",
          "objc/components/audio/SLRRTCAudioSessionConfiguration.h",
          "objc/components/audio/SLRRTCAudioSessionConfiguration.m",
          "objc/components/audio/SLRRTCNativeAudioSessionDelegateAdapter.h",
          "objc/components/audio/SLRRTCNativeAudioSessionDelegateAdapter.mm",
        ]
        configs += [
          "..:common_objc",
          ":used_from_extension",
        ]

        public_configs = [ ":common_config_objc" ]

        libs = [ "AVFoundation.framework" ]

        deps = [
          ":audio_session_observer",
          ":base_objc",
          ":helpers_objc",
          "../rtc_base:checks",
          "../rtc_base:rtc_base",
          "../rtc_base:rtc_base_approved",
        ]
      }
    }

    rtc_static_library("videosource_objc") {
      sources = [
        "objc/api/peerconnection/SLRRTCVideoSource+Private.h",
        "objc/api/peerconnection/SLRRTCVideoSource.h",
        "objc/api/peerconnection/SLRRTCVideoSource.mm",
      ]

      deps = [
        ":base_objc",
        ":mediasource_objc",
        ":native_video",
        ":videoframebuffer_objc",
        "../api:libjingle_peerconnection_api",
        "../api/video:video_frame",
        "../api/video:video_frame_i420",
        "../common_video",
        "../media:rtc_media_base",
        "../rtc_base:checks",
        "../rtc_base:rtc_base",
        "//third_party/libyuv",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
    }

    rtc_static_library("videoframebuffer_objc") {
      visibility = [ "*" ]
      sources = [
        "objc/api/video_frame_buffer/SLRRTCNativeI420Buffer+Private.h",
        "objc/api/video_frame_buffer/SLRRTCNativeI420Buffer.h",
        "objc/api/video_frame_buffer/SLRRTCNativeI420Buffer.mm",
        "objc/api/video_frame_buffer/SLRRTCNativeMutableI420Buffer.h",
        "objc/api/video_frame_buffer/SLRRTCNativeMutableI420Buffer.mm",
        "objc/components/video_frame_buffer/SLRRTCCVPixelBuffer.h",
        "objc/components/video_frame_buffer/SLRRTCCVPixelBuffer.mm",
      ]
      deps = [
        ":base_objc",
        "//api/video:video_frame",
        "//api/video:video_frame_i420",
        "//common_video",
        "//rtc_base:checks",
        "//rtc_base:rtc_base_approved",
        "//third_party/libyuv",
      ]
      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
    }

    rtc_static_library("video_objc") {
      sources = [
        "objc/components/renderer/opengl/SLRRTCDefaultShader.h",
        "objc/components/renderer/opengl/SLRRTCDefaultShader.mm",
        "objc/components/renderer/opengl/SLRRTCI420TextureCache.h",
        "objc/components/renderer/opengl/SLRRTCI420TextureCache.mm",
        "objc/components/renderer/opengl/SLRRTCOpenGLDefines.h",
        "objc/components/renderer/opengl/SLRRTCShader.h",
        "objc/components/renderer/opengl/SLRRTCShader.mm",
        "objc/components/renderer/opengl/SLRRTCVideoViewShading.h",
      ]
      libs = []
      if (is_ios) {
        sources += [
          "objc/components/renderer/opengl/SLRRTCNV12TextureCache.h",
          "objc/components/renderer/opengl/SLRRTCNV12TextureCache.m",
        ]
        libs += [
          "GLKit.framework",
          "OpenGLES.framework",
          "QuartzCore.framework",
        ]
      } else if (is_mac) {
        libs += [
          "CoreMedia.framework",
          "CoreVideo.framework",
          "OpenGL.framework",
        ]
      }

      deps = [
        ":base_objc",
        ":helpers_objc",
        ":mediaconstraints_objc",
        ":native_video",
        ":videoframebuffer_objc",
        ":videosource_objc",
        "../api:libjingle_peerconnection_api",
        "../api/video:video_frame",
        "../common_video",
        "../media:rtc_media_base",
        "../rtc_base:checks",
        "../rtc_base:rtc_base",
        "//third_party/abseil-cpp/absl/types:optional",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
    }

    rtc_static_library("ui_objc") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      if (is_ios) {
        sources = [
          "objc/components/renderer/opengl/SLRRTCDisplayLinkTimer.h",
          "objc/components/renderer/opengl/SLRRTCDisplayLinkTimer.m",
          "objc/components/renderer/opengl/SLRRTCEAGLVideoView.h",
          "objc/components/renderer/opengl/SLRRTCEAGLVideoView.m",
        ]
      }
      if (is_mac) {
        sources = [
          "objc/components/renderer/opengl/SLRRTCNSGLVideoView.h",
          "objc/components/renderer/opengl/SLRRTCNSGLVideoView.m",
        ]
      }
      configs += [ "..:common_objc" ]
      deps = [
        ":base_objc",
        ":helpers_objc",
        ":video_objc",
        ":videocapture_objc",
        ":videoframebuffer_objc",
      ]
    }

    if (rtc_use_metal_rendering) {
      rtc_static_library("metal_objc") {
        visibility = [ "*" ]
        allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
        sources = [
          "objc/components/renderer/metal/SLRRTCMTLI420Renderer.h",
          "objc/components/renderer/metal/SLRRTCMTLI420Renderer.mm",
          "objc/components/renderer/metal/SLRRTCMTLRenderer+Private.h",
          "objc/components/renderer/metal/SLRRTCMTLRenderer.h",
          "objc/components/renderer/metal/SLRRTCMTLRenderer.mm",
        ]
        if (is_ios) {
          sources += [
            "objc/components/renderer/metal/SLRRTCMTLNV12Renderer.h",
            "objc/components/renderer/metal/SLRRTCMTLNV12Renderer.mm",
            "objc/components/renderer/metal/SLRRTCMTLRGBRenderer.h",
            "objc/components/renderer/metal/SLRRTCMTLRGBRenderer.mm",
            "objc/components/renderer/metal/SLRRTCMTLVideoView.h",
            "objc/components/renderer/metal/SLRRTCMTLVideoView.m",
          ]
        }
        if (is_mac) {
          sources += [
            "objc/components/renderer/metal/SLRRTCMTLNSVideoView.h",
            "objc/components/renderer/metal/SLRRTCMTLNSVideoView.m",
          ]
        }
        libs = [
          "CoreVideo.framework",
          "Metal.framework",
          "MetalKit.framework",
        ]
        deps = [
          ":base_objc",
          ":peerconnectionfactory_base_objc",
          ":video_objc",
          ":videoframebuffer_objc",
          "../api/video:video_frame",
          "../rtc_base:checks",
          "../rtc_base:rtc_base_approved",
        ]
        configs += [ "..:common_objc" ]
        public_configs = [ ":common_config_objc" ]
      }
    }

    # TODO(bugs.webrtc.org/9627): Remove this target.
    rtc_static_library("videocapturebase_objc") {
      visibility = [ "*" ]
      sources = [
        "objc/helpers/noop.mm",
      ]

      configs += [ "..:common_objc" ]

      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        ":videoframebuffer_objc",
      ]
    }

    rtc_static_library("videocapture_objc") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      sources = [
        "objc/components/capturer/SLRRTCCameraVideoCapturer.h",
        "objc/components/capturer/SLRRTCCameraVideoCapturer.m",
      ]
      if (is_ios) {
        sources += [
          "objc/components/capturer/SLRRTCFileVideoCapturer.h",
          "objc/components/capturer/SLRRTCFileVideoCapturer.m",
        ]
      }
      libs = [ "AVFoundation.framework" ]

      configs += [ "..:common_objc" ]

      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        ":helpers_objc",
        ":video_objc",
        ":videoframebuffer_objc",
      ]
    }

    rtc_static_library("videocodec_objc") {
      visibility = [ "*" ]
      configs += [ "..:no_global_constructors" ]
      sources = [
        "objc/components/video_codec/SLRRTCCodecSpecificInfoH264+Private.h",
        "objc/components/video_codec/SLRRTCCodecSpecificInfoH264.h",
        "objc/components/video_codec/SLRRTCCodecSpecificInfoH264.mm",
        "objc/components/video_codec/SLRRTCH264ProfileLevelId.h",
        "objc/components/video_codec/SLRRTCH264ProfileLevelId.mm",
      ]
      if (is_ios) {
        sources += [
          "objc/components/video_codec/UIDevice+H264Profile.h",
          "objc/components/video_codec/UIDevice+H264Profile.mm",
        ]
      }

      public_configs = [ ":common_config_objc" ]
      deps = [
        ":base_objc",
        ":helpers_objc",
        "../api/video_codecs:video_codecs_api",
        "../common_video",
        "../media:rtc_h264_profile_id",
        "../media:rtc_media_base",
        "../modules:module_api",
        "../modules/video_coding:video_codec_interface",
        "../rtc_base:checks",
        "../rtc_base:rtc_base_approved",
      ]
    }

    rtc_static_library("default_codec_factory_objc") {
      sources = [
        "objc/components/video_codec/SLRRTCDefaultVideoDecoderFactory.h",
        "objc/components/video_codec/SLRRTCDefaultVideoDecoderFactory.m",
        "objc/components/video_codec/SLRRTCDefaultVideoEncoderFactory.h",
        "objc/components/video_codec/SLRRTCDefaultVideoEncoderFactory.m",
      ]

      deps = [
        ":base_objc",
        ":native_video",
        ":videocodec_objc",
        ":videotoolbox_objc",
        ":vp8",
        ":vp9",
        ":vpx_codec_constants",
      ]
    }

    rtc_static_library("vpx_codec_constants") {
      configs += [ "..:no_global_constructors" ]
      sources = [
        "objc/api/video_codec/SLRRTCVideoCodecConstants.h",
        "objc/api/video_codec/SLRRTCVideoCodecConstants.mm",
      ]

      deps = [
        ":base_objc",
        "../media:rtc_media_base",
      ]
    }

    rtc_static_library("vp8") {
      visibility = [ "*" ]
      allow_poison = [ "software_video_codecs" ]
      sources = [
        "objc/api/video_codec/SLRRTCVideoDecoderVP8.h",
        "objc/api/video_codec/SLRRTCVideoDecoderVP8.mm",
        "objc/api/video_codec/SLRRTCVideoEncoderVP8.h",
        "objc/api/video_codec/SLRRTCVideoEncoderVP8.mm",
      ]

      deps = [
        ":base_objc",
        ":wrapped_native_codec_objc",
        "../modules/video_coding:webrtc_vp8",
      ]
    }

    rtc_static_library("vp9") {
      visibility = [ "*" ]
      allow_poison = [ "software_video_codecs" ]
      sources = [
        "objc/api/video_codec/SLRRTCVideoDecoderVP9.h",
        "objc/api/video_codec/SLRRTCVideoDecoderVP9.mm",
        "objc/api/video_codec/SLRRTCVideoEncoderVP9.h",
        "objc/api/video_codec/SLRRTCVideoEncoderVP9.mm",
      ]

      deps = [
        ":base_objc",
        ":wrapped_native_codec_objc",
        "../media:rtc_media_base",
        "../modules/video_coding:webrtc_vp9",
      ]
    }

    # Build the PeerConnectionFactory without audio/video support.
    # This target depends on the objc_peeerconnectionfactory_base which still
    # includes some audio/video related objects such as SLRRTCAudioSource because
    # these objects are just thin wrappers of native C++ interfaces required
    # when implementing webrtc::PeerConnectionFactoryInterface and
    # webrtc::PeerConnectionInterface.
    # The applications which only use WebRTC DataChannel can depend on this.
    rtc_static_library("peerconnectionfactory_no_media_objc") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      defines = [ "HAVE_NO_MEDIA" ]

      sources = [
        "objc/helpers/noop.mm",
      ]

      public_configs = [ ":common_config_objc" ]

      deps = [
        ":native_api",
        ":native_video",
        ":peerconnectionfactory_base_objc",
        "../api:libjingle_peerconnection_api",
        "../rtc_base:rtc_base",
      ]
    }

    rtc_static_library("mediaconstraints_objc") {
      configs += [ "..:no_global_constructors" ]
      sources = [
        "objc/api/peerconnection/SLRRTCMediaConstraints+Private.h",
        "objc/api/peerconnection/SLRRTCMediaConstraints.h",
        "objc/api/peerconnection/SLRRTCMediaConstraints.mm",
      ]

      public_configs = [ ":common_config_objc" ]
      deps = [
        ":base_objc",
        ":helpers_objc",
        ":media_constraints",
      ]
    }

    # TODO(bugs.webrtc.org/9627): Remove, targets should depend on base_objc.
    rtc_source_set("videorenderer_objc") {
      visibility = [ "*" ]
      sources = [
        "objc/helpers/noop.mm",
      ]

      configs += [ "..:common_objc" ]
      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
      ]
    }

    rtc_static_library("videorendereradapter_objc") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      sources = [
        "objc/api/SLRRTCVideoRendererAdapter+Private.h",
        "objc/api/SLRRTCVideoRendererAdapter.h",
        "objc/api/SLRRTCVideoRendererAdapter.mm",
      ]

      configs += [ "..:common_objc" ]
      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        ":native_api",
        ":videoframebuffer_objc",
        "../api:libjingle_peerconnection_api",
      ]
    }

    rtc_static_library("mediasource_objc") {
      sources = [
        "objc/api/peerconnection/SLRRTCMediaSource+Private.h",
        "objc/api/peerconnection/SLRRTCMediaSource.h",
        "objc/api/peerconnection/SLRRTCMediaSource.mm",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        "../api:libjingle_peerconnection_api",
        "../rtc_base:checks",
      ]
    }

    rtc_static_library("base_native_additions_objc") {
      sources = [
        "objc/api/peerconnection/SLRRTCEncodedImage+Private.h",
        "objc/api/peerconnection/SLRRTCEncodedImage+Private.mm",
        "objc/api/peerconnection/SLRRTCRtpFragmentationHeader+Private.h",
        "objc/api/peerconnection/SLRRTCRtpFragmentationHeader+Private.mm",
        "objc/api/peerconnection/SLRRTCVideoCodecInfo+Private.h",
        "objc/api/peerconnection/SLRRTCVideoCodecInfo+Private.mm",
        "objc/api/peerconnection/SLRRTCVideoEncoderSettings+Private.h",
        "objc/api/peerconnection/SLRRTCVideoEncoderSettings+Private.mm",
      ]

      configs += [ "..:common_objc" ]

      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        ":helpers_objc",
        "../api/video:encoded_image",
        "../api/video_codecs:video_codecs_api",
        "../modules:module_api",
        "../modules/video_coding:video_codec_interface",
        "../rtc_base:rtc_base",
      ]
    }

    rtc_static_library("peerconnectionfactory_base_objc") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      configs += [
        "..:no_exit_time_destructors",
        "..:no_global_constructors",
      ]
      sources = [
        "objc/api/peerconnection/SLRRTCAudioSource+Private.h",
        "objc/api/peerconnection/SLRRTCAudioSource.h",
        "objc/api/peerconnection/SLRRTCAudioSource.mm",
        "objc/api/peerconnection/SLRRTCAudioTrack+Private.h",
        "objc/api/peerconnection/SLRRTCAudioTrack.h",
        "objc/api/peerconnection/SLRRTCAudioTrack.mm",
        "objc/api/peerconnection/SLRRTCCertificate.h",
        "objc/api/peerconnection/SLRRTCCertificate.mm",
        "objc/api/peerconnection/SLRRTCConfiguration+Native.h",
        "objc/api/peerconnection/SLRRTCConfiguration+Private.h",
        "objc/api/peerconnection/SLRRTCConfiguration.h",
        "objc/api/peerconnection/SLRRTCConfiguration.mm",
        "objc/api/peerconnection/SLRRTCCryptoOptions.h",
        "objc/api/peerconnection/SLRRTCCryptoOptions.mm",
        "objc/api/peerconnection/SLRRTCDataChannel+Private.h",
        "objc/api/peerconnection/SLRRTCDataChannel.h",
        "objc/api/peerconnection/SLRRTCDataChannel.mm",
        "objc/api/peerconnection/SLRRTCDataChannelConfiguration+Private.h",
        "objc/api/peerconnection/SLRRTCDataChannelConfiguration.h",
        "objc/api/peerconnection/SLRRTCDataChannelConfiguration.mm",
        "objc/api/peerconnection/SLRRTCDtmfSender+Private.h",
        "objc/api/peerconnection/SLRRTCDtmfSender.h",
        "objc/api/peerconnection/SLRRTCDtmfSender.mm",
        "objc/api/peerconnection/SLRRTCFieldTrials.h",
        "objc/api/peerconnection/SLRRTCFieldTrials.mm",
        "objc/api/peerconnection/SLRRTCIceCandidate+Private.h",
        "objc/api/peerconnection/SLRRTCIceCandidate.h",
        "objc/api/peerconnection/SLRRTCIceCandidate.mm",
        "objc/api/peerconnection/SLRRTCIceServer+Private.h",
        "objc/api/peerconnection/SLRRTCIceServer.h",
        "objc/api/peerconnection/SLRRTCIceServer.mm",
        "objc/api/peerconnection/SLRRTCIntervalRange+Private.h",
        "objc/api/peerconnection/SLRRTCIntervalRange.h",
        "objc/api/peerconnection/SLRRTCIntervalRange.mm",
        "objc/api/peerconnection/SLRRTCLegacyStatsReport+Private.h",
        "objc/api/peerconnection/SLRRTCLegacyStatsReport.h",
        "objc/api/peerconnection/SLRRTCLegacyStatsReport.mm",
        "objc/api/peerconnection/SLRRTCMediaStream+Private.h",
        "objc/api/peerconnection/SLRRTCMediaStream.h",
        "objc/api/peerconnection/SLRRTCMediaStream.mm",
        "objc/api/peerconnection/SLRRTCMediaStreamTrack+Private.h",
        "objc/api/peerconnection/SLRRTCMediaStreamTrack.h",
        "objc/api/peerconnection/SLRRTCMediaStreamTrack.mm",
        "objc/api/peerconnection/SLRRTCMetrics.h",
        "objc/api/peerconnection/SLRRTCMetrics.mm",
        "objc/api/peerconnection/SLRRTCMetricsSampleInfo+Private.h",
        "objc/api/peerconnection/SLRRTCMetricsSampleInfo.h",
        "objc/api/peerconnection/SLRRTCMetricsSampleInfo.mm",
        "objc/api/peerconnection/SLRRTCPeerConnection+DataChannel.mm",
        "objc/api/peerconnection/SLRRTCPeerConnection+Native.h",
        "objc/api/peerconnection/SLRRTCPeerConnection+Private.h",
        "objc/api/peerconnection/SLRRTCPeerConnection+Stats.mm",
        "objc/api/peerconnection/SLRRTCPeerConnection.h",
        "objc/api/peerconnection/SLRRTCPeerConnection.mm",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactory+Native.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactory+Private.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactory.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactory.mm",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryBuilder+DefaultComponents.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryBuilder+DefaultComponents.mm",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryBuilder.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryBuilder.mm",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryOptions+Private.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryOptions.h",
        "objc/api/peerconnection/SLRRTCPeerConnectionFactoryOptions.mm",
        "objc/api/peerconnection/SLRRTCRtcpParameters+Private.h",
        "objc/api/peerconnection/SLRRTCRtcpParameters.h",
        "objc/api/peerconnection/SLRRTCRtcpParameters.mm",
        "objc/api/peerconnection/SLRRTCRtpCodecParameters+Private.h",
        "objc/api/peerconnection/SLRRTCRtpCodecParameters.h",
        "objc/api/peerconnection/SLRRTCRtpCodecParameters.mm",
        "objc/api/peerconnection/SLRRTCRtpEncodingParameters+Private.h",
        "objc/api/peerconnection/SLRRTCRtpEncodingParameters.h",
        "objc/api/peerconnection/SLRRTCRtpEncodingParameters.mm",
        "objc/api/peerconnection/SLRRTCRtpHeaderExtension+Private.h",
        "objc/api/peerconnection/SLRRTCRtpHeaderExtension.h",
        "objc/api/peerconnection/SLRRTCRtpHeaderExtension.mm",
        "objc/api/peerconnection/SLRRTCRtpParameters+Private.h",
        "objc/api/peerconnection/SLRRTCRtpParameters.h",
        "objc/api/peerconnection/SLRRTCRtpParameters.mm",
        "objc/api/peerconnection/SLRRTCRtpReceiver+Native.h",
        "objc/api/peerconnection/SLRRTCRtpReceiver+Private.h",
        "objc/api/peerconnection/SLRRTCRtpReceiver.h",
        "objc/api/peerconnection/SLRRTCRtpReceiver.mm",
        "objc/api/peerconnection/SLRRTCRtpSender+Native.h",
        "objc/api/peerconnection/SLRRTCRtpSender+Private.h",
        "objc/api/peerconnection/SLRRTCRtpSender.h",
        "objc/api/peerconnection/SLRRTCRtpSender.mm",
        "objc/api/peerconnection/SLRRTCRtpTransceiver+Private.h",
        "objc/api/peerconnection/SLRRTCRtpTransceiver.h",
        "objc/api/peerconnection/SLRRTCRtpTransceiver.mm",
        "objc/api/peerconnection/SLRRTCSSLAdapter.h",
        "objc/api/peerconnection/SLRRTCSSLAdapter.mm",
        "objc/api/peerconnection/SLRRTCSessionDescription+Private.h",
        "objc/api/peerconnection/SLRRTCSessionDescription.h",
        "objc/api/peerconnection/SLRRTCSessionDescription.mm",
        "objc/api/peerconnection/SLRRTCStatisticsReport+Private.h",
        "objc/api/peerconnection/SLRRTCStatisticsReport.h",
        "objc/api/peerconnection/SLRRTCStatisticsReport.mm",
        "objc/api/peerconnection/SLRRTCTracing.h",
        "objc/api/peerconnection/SLRRTCTracing.mm",
        "objc/api/peerconnection/SLRRTCVideoTrack+Private.h",
        "objc/api/peerconnection/SLRRTCVideoTrack.h",
        "objc/api/peerconnection/SLRRTCVideoTrack.mm",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]
      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_native_additions_objc",
        ":base_objc",
        ":file_logger_objc",
        ":helpers_objc",
        ":legacy_header_paths",
        ":mediaconstraints_objc",
        ":mediasource_objc",
        ":native_api",
        ":native_video",
        ":video_objc",
        ":videoframebuffer_objc",
        ":videorendereradapter_objc",
        ":videosource_objc",
        ":videotoolbox_objc",
        "../api:create_peerconnection_factory",
        "../api:libjingle_peerconnection_api",
        "../api:rtc_stats_api",
        "../api:scoped_refptr",
        "../api/audio_codecs:audio_codecs_api",
        "../api/audio_codecs:builtin_audio_decoder_factory",
        "../api/audio_codecs:builtin_audio_encoder_factory",
        "../api/video:video_frame",
        "../api/video_codecs:video_codecs_api",
        "../common_video",
        "../logging:rtc_event_log_impl_base",
        "../media:rtc_media_base",
        "../modules:module_api",
        "../modules/audio_device:audio_device_api",
        "../modules/audio_processing:api",
        "../modules/audio_processing:audio_processing",
        "../modules/video_coding:video_codec_interface",
        "../pc:peerconnection",
        "../rtc_base:checks",
        "../rtc_base:rtc_base",
        "../system_wrappers:field_trial",
        "../system_wrappers:metrics",
        "//third_party/abseil-cpp/absl/memory",
      ]

      if (is_ios) {
        deps += [ ":native_api_audio_device_module" ]
      }
    }

    # TODO(bugs.webrtc.org/9627): Remove this target.
    rtc_source_set("legacy_header_paths") {
      sources = [
        "objc/Framework/Classes/Common/NSString+StdString.h",
        "objc/Framework/Classes/Common/scoped_cftyperef.h",
        "objc/Framework/Classes/PeerConnection/SLRRTCConfiguration+Native.h",
        "objc/Framework/Classes/PeerConnection/SLRRTCPeerConnection+Native.h",
        "objc/Framework/Classes/PeerConnection/SLRRTCPeerConnectionFactory+Native.h",
        "objc/Framework/Classes/PeerConnection/SLRRTCVideoCodec+Private.h",
        "objc/Framework/Classes/Video/SLRRTCDefaultShader.h",
        "objc/Framework/Classes/Video/SLRRTCNV12TextureCache.h",
        "objc/Framework/Classes/VideoToolbox/nalu_rewriter.h",
        "objc/Framework/Headers/WebRTC/SLRRTCAudioSession.h",
        "objc/Framework/Headers/WebRTC/SLRRTCAudioSessionConfiguration.h",
        "objc/Framework/Headers/WebRTC/SLRRTCAudioSource.h",
        "objc/Framework/Headers/WebRTC/SLRRTCAudioTrack.h",
        "objc/Framework/Headers/WebRTC/SLRRTCCVPixelBuffer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCCallbackLogger.h",
        "objc/Framework/Headers/WebRTC/SLRRTCCameraPreviewView.h",
        "objc/Framework/Headers/WebRTC/SLRRTCCameraVideoCapturer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCCertificate.h",
        "objc/Framework/Headers/WebRTC/SLRRTCConfiguration.h",
        "objc/Framework/Headers/WebRTC/SLRRTCDataChannel.h",
        "objc/Framework/Headers/WebRTC/SLRRTCDataChannelConfiguration.h",
        "objc/Framework/Headers/WebRTC/SLRRTCDefaultVideoDecoderFactory.h",
        "objc/Framework/Headers/WebRTC/SLRRTCDefaultVideoEncoderFactory.h",
        "objc/Framework/Headers/WebRTC/SLRRTCDispatcher.h",
        "objc/Framework/Headers/WebRTC/SLRRTCDtmfSender.h",
        "objc/Framework/Headers/WebRTC/SLRRTCEAGLVideoView.h",
        "objc/Framework/Headers/WebRTC/SLRRTCFieldTrials.h",
        "objc/Framework/Headers/WebRTC/SLRRTCFileLogger.h",
        "objc/Framework/Headers/WebRTC/SLRRTCFileVideoCapturer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCH264ProfileLevelId.h",
        "objc/Framework/Headers/WebRTC/SLRRTCIceCandidate.h",
        "objc/Framework/Headers/WebRTC/SLRRTCIceServer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCIntervalRange.h",
        "objc/Framework/Headers/WebRTC/SLRRTCLegacyStatsReport.h",
        "objc/Framework/Headers/WebRTC/SLRRTCLogging.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMTLNSVideoView.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMTLVideoView.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMacros.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMediaConstraints.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMediaSource.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMediaStream.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMediaStreamTrack.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMetrics.h",
        "objc/Framework/Headers/WebRTC/SLRRTCMetricsSampleInfo.h",
        "objc/Framework/Headers/WebRTC/SLRRTCNSGLVideoView.h",
        "objc/Framework/Headers/WebRTC/SLRRTCPeerConnection.h",
        "objc/Framework/Headers/WebRTC/SLRRTCPeerConnectionFactory.h",
        "objc/Framework/Headers/WebRTC/SLRRTCPeerConnectionFactoryOptions.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtcpParameters.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpCodecParameters.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpEncodingParameters.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpHeaderExtension.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpParameters.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpReceiver.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpSender.h",
        "objc/Framework/Headers/WebRTC/SLRRTCRtpTransceiver.h",
        "objc/Framework/Headers/WebRTC/SLRRTCSSLAdapter.h",
        "objc/Framework/Headers/WebRTC/SLRRTCSessionDescription.h",
        "objc/Framework/Headers/WebRTC/SLRRTCTracing.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoCapturer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoCodec.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoCodecFactory.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoCodecH264.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoCodecInfo.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoDecoderVP8.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoDecoderVP9.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoEncoderVP8.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoEncoderVP9.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoFrame.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoFrameBuffer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoRenderer.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoSource.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoTrack.h",
        "objc/Framework/Headers/WebRTC/SLRRTCVideoViewShading.h",
        "objc/Framework/Headers/WebRTC/UIDevice+SLRRTCDevice.h",
        "objc/Framework/Native/api/audio_device_module.h",
        "objc/Framework/Native/api/video_decoder_factory.h",
        "objc/Framework/Native/api/video_encoder_factory.h",
        "objc/Framework/Native/api/video_frame_buffer.h",
        "objc/Framework/Native/src/objc_video_decoder_factory.h",
        "objc/Framework/Native/src/objc_video_encoder_factory.h",
      ]
    }

    if (rtc_include_tests) {
      if (is_ios) {
        rtc_source_set("sdk_unittests_sources") {
          testonly = true
          include_dirs = [ "objc/" ]

          sources = [
            "objc/unittests/ObjCVideoTrackSource_xctest.mm",
            "objc/unittests/SLRRTCCVPixelBuffer_xctest.mm",
            "objc/unittests/SLRRTCCallbackLogger_xctest.m",
            "objc/unittests/SLRRTCFileVideoCapturer_xctest.mm",
            "objc/unittests/SLRRTCH264ProfileLevelId_xctest.m",
            "objc/unittests/SLRRTCNV12TextureCache_xctest.m",
            "objc/unittests/SLRRTCPeerConnectionFactory_xctest.m",
            "objc/unittests/frame_buffer_helpers.h",
            "objc/unittests/frame_buffer_helpers.mm",
            "objc/unittests/nalu_rewriter_xctest.mm",
          ]

          # TODO(peterhanspers): Reenable these tests on simulator.
          # See bugs.webrtc.org/7812
          if (!use_ios_simulator) {
            sources += [
              "objc/unittests/SLRRTCAudioDeviceModule_xctest.mm",
              "objc/unittests/SLRRTCAudioDevice_xctest.mm",
            ]
          }

          deps = [
            ":audio_device",
            ":audio_objc",
            ":base_objc",
            ":callback_logger_objc",
            ":framework_objc",
            ":mediaconstraints_objc",
            ":native_api",
            ":native_api_audio_device_module",
            ":native_video",
            ":peerconnectionfactory_base_objc",
            ":video_objc",
            ":video_toolbox_cc",
            ":videocapture_objc",
            ":videocodec_objc",
            ":videoframebuffer_objc",
            ":videosource_objc",
            ":videotoolbox_objc",
            "../api:scoped_refptr",
            "../api/video:video_frame_i420",
            "../common_video:common_video",
            "../media:rtc_media_base",
            "../media:rtc_media_tests_utils",
            "../modules:module_api",
            "../rtc_base:gunit_helpers",
            "../rtc_base:rtc_base",
            "../system_wrappers:system_wrappers",
            "//third_party/libyuv",
          ]

          if (rtc_use_metal_rendering) {
            sources += [ "objc/unittests/SLRRTCMTLVideoView_xctest.m" ]
            deps += [ ":metal_objc" ]
          }

          public_deps = [
            "//build/config/ios:xctest",
            "//third_party/ocmock",
          ]
        }

        bundle_data("sdk_unittests_bundle_data") {
          sources = [
            "objc/unittests/audio_short16.pcm",
            "objc/unittests/audio_short44.pcm",
            "objc/unittests/audio_short48.pcm",

            # Sample video taken from https://media.xiph.org/video/derf/
            "objc/unittests/foreman.mp4",
          ]
          outputs = [
            "{{bundle_resources_dir}}/{{source_file_part}}",
          ]
        }

        # These tests use static linking.
        rtc_ios_xctest_test("sdk_unittests") {
          info_plist = "//test/ios/Info.plist"
          sources = [
            "objc/unittests/main.mm",
          ]

          _bundle_id_suffix = ios_generic_test_bundle_id_suffix
          extra_substitutions = [ "GTEST_BUNDLE_ID_SUFFIX=$_bundle_id_suffix" ]
          deps = [
            ":peerconnectionfactory_base_objc",
            ":sdk_unittests_bundle_data",
            ":sdk_unittests_sources",
            "//test:test_support",
          ]
          ldflags = [ "-all_load" ]
        }

        # These tests link to the framework.
        rtc_ios_xctest_test("sdk_framework_unittests") {
          info_plist = "//test/ios/Info.plist"
          sources = [
            "objc/unittests/SLRRTCDoNotPutCPlusPlusInFrameworkHeaders_xctest.m",
            "objc/unittests/main.mm",
          ]

          _bundle_id_suffix = ios_generic_test_bundle_id_suffix
          extra_substitutions = [ "GTEST_BUNDLE_ID_SUFFIX=$_bundle_id_suffix" ]
          deps = [
            ":framework_objc+link",
            ":ios_framework_bundle",
            "//test:test_support",
          ]
        }
      }

      # TODO(denicija): once all tests are migrated to xctest remove this source set.
      rtc_source_set("rtc_unittests_objc") {
        testonly = true

        sources = [
          "objc/unittests/SLRRTCCertificateTest.mm",
          "objc/unittests/SLRRTCConfigurationTest.mm",
          "objc/unittests/SLRRTCDataChannelConfigurationTest.mm",
          "objc/unittests/SLRRTCIceCandidateTest.mm",
          "objc/unittests/SLRRTCIceServerTest.mm",
          "objc/unittests/SLRRTCIntervalRangeTests.mm",
          "objc/unittests/SLRRTCMediaConstraintsTest.mm",
          "objc/unittests/SLRRTCPeerConnectionFactoryBuilderTest.mm",
          "objc/unittests/SLRRTCPeerConnectionTest.mm",
          "objc/unittests/SLRRTCSessionDescriptionTest.mm",
          "objc/unittests/SLRRTCTracingTest.mm",
          "objc/unittests/objc_video_decoder_factory_tests.mm",
          "objc/unittests/objc_video_encoder_factory_tests.mm",
          "objc/unittests/scoped_cftyperef_tests.mm",
        ]
        if (is_ios) {
          sources += [ "objc/unittests/SLRRTCCameraVideoCapturerTests.mm" ]
        }

        # |-ObjC| flag needed to make sure category method implementations
        # are included:
        # https://developer.apple.com/library/mac/qa/qa1490/_index.html
        ldflags = [ "-ObjC" ]

        deps = [
          ":base_objc",
          ":helpers_objc",
          ":mediaconstraints_objc",
          ":native_api",
          ":native_video",
          ":peerconnectionfactory_base_objc",
          ":video_objc",
          ":videocapture_objc",
          ":videocodec_objc",
          ":videoframebuffer_objc",
          ":videosource_objc",
          ":videotoolbox_objc",
          "../api:libjingle_peerconnection_api",
          "../api/audio_codecs:audio_codecs_api",
          "../api/audio_codecs:builtin_audio_decoder_factory",
          "../api/audio_codecs:builtin_audio_encoder_factory",
          "../api/video_codecs:video_codecs_api",
          "../media:rtc_media_base",
          "../modules:module_api",
          "../modules/audio_device:audio_device_api",
          "../modules/audio_processing:api",
          "../modules/audio_processing:audio_processing",
          "../modules/video_coding:video_codec_interface",
          "../rtc_base:gunit_helpers",
          "../rtc_base/system:unused",
          "../test:test_support",
          "//third_party/ocmock",
        ]

        if (is_ios) {
          sources += [ "objc/unittests/SLRRTCAudioSessionTest.mm" ]
          deps += [ ":audio_objc" ]
        }
      }
    }

    if (is_ios) {
      ios_framework_bundle_with_umbrella_header("framework_objc") {
        info_plist = "objc/Info.plist"
        output_name = "SLRWebRTC"

        common_objc_headers = [
          "objc/base/SLRRTCCodecSpecificInfo.h",
          "objc/base/SLRRTCEncodedImage.h",
          "objc/base/SLRRTCI420Buffer.h",
          "objc/base/SLRRTCLogging.h",
          "objc/base/SLRRTCMacros.h",
          "objc/base/SLRRTCMutableI420Buffer.h",
          "objc/base/SLRRTCMutableYUVPlanarBuffer.h",
          "objc/base/SLRRTCRtpFragmentationHeader.h",
          "objc/base/SLRRTCVideoCapturer.h",
          "objc/base/SLRRTCVideoCodecInfo.h",
          "objc/base/SLRRTCVideoDecoder.h",
          "objc/base/SLRRTCVideoDecoderFactory.h",
          "objc/base/SLRRTCVideoEncoder.h",
          "objc/base/SLRRTCVideoEncoderFactory.h",
          "objc/base/SLRRTCVideoEncoderQpThresholds.h",
          "objc/base/SLRRTCVideoEncoderSettings.h",
          "objc/base/SLRRTCVideoFrame.h",
          "objc/base/SLRRTCVideoFrameBuffer.h",
          "objc/base/SLRRTCVideoRenderer.h",
          "objc/base/SLRRTCYUVPlanarBuffer.h",
          "objc/components/audio/SLRRTCAudioSession.h",
          "objc/components/audio/SLRRTCAudioSessionConfiguration.h",
          "objc/components/capturer/SLRRTCCameraVideoCapturer.h",
          "objc/components/capturer/SLRRTCFileVideoCapturer.h",
          "objc/components/renderer/metal/SLRRTCMTLVideoView.h",
          "objc/components/renderer/opengl/SLRRTCEAGLVideoView.h",
          "objc/components/renderer/opengl/SLRRTCVideoViewShading.h",
          "objc/components/video_codec/SLRRTCCodecSpecificInfoH264.h",
          "objc/components/video_codec/SLRRTCDefaultVideoDecoderFactory.h",
          "objc/components/video_codec/SLRRTCDefaultVideoEncoderFactory.h",
          "objc/components/video_codec/SLRRTCH264ProfileLevelId.h",
          "objc/components/video_codec/SLRRTCVideoDecoderFactoryH264.h",
          "objc/components/video_codec/SLRRTCVideoDecoderH264.h",
          "objc/components/video_codec/SLRRTCVideoEncoderFactoryH264.h",
          "objc/components/video_codec/SLRRTCVideoEncoderH264.h",
          "objc/components/video_frame_buffer/SLRRTCCVPixelBuffer.h",
          "objc/helpers/SLRRTCCameraPreviewView.h",
          "objc/helpers/SLRRTCDispatcher.h",
          "objc/helpers/UIDevice+SLRRTCDevice.h",
          "objc/api/peerconnection/SLRRTCAudioSource.h",
          "objc/api/peerconnection/SLRRTCAudioTrack.h",
          "objc/api/peerconnection/SLRRTCConfiguration.h",
          "objc/api/peerconnection/SLRRTCDataChannel.h",
          "objc/api/peerconnection/SLRRTCDataChannelConfiguration.h",
          "objc/api/peerconnection/SLRRTCFieldTrials.h",
          "objc/api/peerconnection/SLRRTCIceCandidate.h",
          "objc/api/peerconnection/SLRRTCIceServer.h",
          "objc/api/peerconnection/SLRRTCIntervalRange.h",
          "objc/api/peerconnection/SLRRTCLegacyStatsReport.h",
          "objc/api/peerconnection/SLRRTCMediaConstraints.h",
          "objc/api/peerconnection/SLRRTCMediaSource.h",
          "objc/api/peerconnection/SLRRTCMediaStream.h",
          "objc/api/peerconnection/SLRRTCMediaStreamTrack.h",
          "objc/api/peerconnection/SLRRTCMetrics.h",
          "objc/api/peerconnection/SLRRTCMetricsSampleInfo.h",
          "objc/api/peerconnection/SLRRTCPeerConnection.h",
          "objc/api/peerconnection/SLRRTCPeerConnectionFactory.h",
          "objc/api/peerconnection/SLRRTCPeerConnectionFactoryOptions.h",
          "objc/api/peerconnection/SLRRTCRtcpParameters.h",
          "objc/api/peerconnection/SLRRTCRtpCodecParameters.h",
          "objc/api/peerconnection/SLRRTCRtpEncodingParameters.h",
          "objc/api/peerconnection/SLRRTCRtpHeaderExtension.h",
          "objc/api/peerconnection/SLRRTCRtpParameters.h",
          "objc/api/peerconnection/SLRRTCRtpReceiver.h",
          "objc/api/peerconnection/SLRRTCRtpSender.h",
          "objc/api/peerconnection/SLRRTCRtpTransceiver.h",
          "objc/api/peerconnection/SLRRTCDtmfSender.h",
          "objc/api/peerconnection/SLRRTCSSLAdapter.h",
          "objc/api/peerconnection/SLRRTCSessionDescription.h",
          "objc/api/peerconnection/SLRRTCTracing.h",
          "objc/api/peerconnection/SLRRTCCertificate.h",
          "objc/api/peerconnection/SLRRTCCryptoOptions.h",
          "objc/api/peerconnection/SLRRTCVideoSource.h",
          "objc/api/peerconnection/SLRRTCVideoTrack.h",
          "objc/api/video_codec/SLRRTCVideoCodecConstants.h",
          "objc/api/video_codec/SLRRTCVideoDecoderVP8.h",
          "objc/api/video_codec/SLRRTCVideoDecoderVP9.h",
          "objc/api/video_codec/SLRRTCVideoEncoderVP8.h",
          "objc/api/video_codec/SLRRTCVideoEncoderVP9.h",
          "objc/api/video_frame_buffer/SLRRTCNativeI420Buffer.h",
          "objc/api/video_frame_buffer/SLRRTCNativeMutableI420Buffer.h",
        ]

        if (!build_with_chromium) {
          common_objc_headers += [
            "objc/api/logging/SLRRTCCallbackLogger.h",
            "objc/api/peerconnection/SLRRTCFileLogger.h",
          ]
        }

        sources = common_objc_headers
        public_headers = common_objc_headers

        ldflags = [
          "-all_load",
          "-install_name",
          "@rpath/$output_name.framework/$output_name",
        ]

        deps = [
          ":audio_objc",
          ":base_objc",
          ":default_codec_factory_objc",
          ":native_api",
          ":native_video",
          ":peerconnectionfactory_base_objc",
          ":ui_objc",
          ":videocapture_objc",
          ":videocodec_objc",
          ":videotoolbox_objc",
          "../rtc_base:rtc_base_approved",
        ]
        if (rtc_use_metal_rendering) {
          deps += [ ":metal_objc" ]
        }
        if (!build_with_chromium) {
          deps += [
            ":callback_logger_objc",
            ":file_logger_objc",
          ]
        }

        libs = [
          "AVFoundation.framework",
          "CoreGraphics.framework",
          "CoreMedia.framework",
          "GLKit.framework",
        ]

        configs += [
          "..:common_objc",
          ":used_from_extension",
        ]

        public_configs = [ ":common_config_objc" ]
      }

      bundle_data("ios_framework_bundle") {
        deps = [
          "../sdk:framework_objc",
        ]
        sources = [
          "$root_build_dir/SLRWebRTC.framework",
        ]
        outputs = [
          "{{bundle_resources_dir}}/Frameworks/{{source_file_part}}",
        ]
      }
    }

    if (is_mac) {
      mac_framework_bundle_with_umbrella_header("mac_framework_objc") {
        info_plist = "objc/Info.plist"
        output_name = "WebRTC"

        sources = [
          "objc/api/peerconnection/SLRRTCAudioSource.h",
          "objc/api/peerconnection/SLRRTCAudioTrack.h",
          "objc/api/peerconnection/SLRRTCCertificate.h",
          "objc/api/peerconnection/SLRRTCConfiguration.h",
          "objc/api/peerconnection/SLRRTCCryptoOptions.h",
          "objc/api/peerconnection/SLRRTCDataChannel.h",
          "objc/api/peerconnection/SLRRTCDataChannelConfiguration.h",
          "objc/api/peerconnection/SLRRTCDtmfSender.h",
          "objc/api/peerconnection/SLRRTCFieldTrials.h",
          "objc/api/peerconnection/SLRRTCIceCandidate.h",
          "objc/api/peerconnection/SLRRTCIceServer.h",
          "objc/api/peerconnection/SLRRTCIntervalRange.h",
          "objc/api/peerconnection/SLRRTCLegacyStatsReport.h",
          "objc/api/peerconnection/SLRRTCMediaConstraints.h",
          "objc/api/peerconnection/SLRRTCMediaSource.h",
          "objc/api/peerconnection/SLRRTCMediaStream.h",
          "objc/api/peerconnection/SLRRTCMediaStreamTrack.h",
          "objc/api/peerconnection/SLRRTCMetrics.h",
          "objc/api/peerconnection/SLRRTCMetricsSampleInfo.h",
          "objc/api/peerconnection/SLRRTCPeerConnection.h",
          "objc/api/peerconnection/SLRRTCPeerConnectionFactory.h",
          "objc/api/peerconnection/SLRRTCPeerConnectionFactoryOptions.h",
          "objc/api/peerconnection/SLRRTCRtcpParameters.h",
          "objc/api/peerconnection/SLRRTCRtpCodecParameters.h",
          "objc/api/peerconnection/SLRRTCRtpEncodingParameters.h",
          "objc/api/peerconnection/SLRRTCRtpHeaderExtension.h",
          "objc/api/peerconnection/SLRRTCRtpParameters.h",
          "objc/api/peerconnection/SLRRTCRtpReceiver.h",
          "objc/api/peerconnection/SLRRTCRtpSender.h",
          "objc/api/peerconnection/SLRRTCRtpTransceiver.h",
          "objc/api/peerconnection/SLRRTCSSLAdapter.h",
          "objc/api/peerconnection/SLRRTCSessionDescription.h",
          "objc/api/peerconnection/SLRRTCTracing.h",
          "objc/api/peerconnection/SLRRTCVideoSource.h",
          "objc/api/peerconnection/SLRRTCVideoTrack.h",
          "objc/api/video_codec/SLRRTCVideoDecoderVP8.h",
          "objc/api/video_codec/SLRRTCVideoDecoderVP9.h",
          "objc/api/video_codec/SLRRTCVideoEncoderVP8.h",
          "objc/api/video_codec/SLRRTCVideoEncoderVP9.h",
          "objc/api/video_frame_buffer/SLRRTCNativeI420Buffer.h",
          "objc/api/video_frame_buffer/SLRRTCNativeMutableI420Buffer.h",
          "objc/base/SLRRTCCodecSpecificInfo.h",
          "objc/base/SLRRTCEncodedImage.h",
          "objc/base/SLRRTCI420Buffer.h",
          "objc/base/SLRRTCLogging.h",
          "objc/base/SLRRTCMacros.h",
          "objc/base/SLRRTCMutableI420Buffer.h",
          "objc/base/SLRRTCMutableYUVPlanarBuffer.h",
          "objc/base/SLRRTCRtpFragmentationHeader.h",
          "objc/base/SLRRTCVideoCapturer.h",
          "objc/base/SLRRTCVideoCodecInfo.h",
          "objc/base/SLRRTCVideoDecoder.h",
          "objc/base/SLRRTCVideoDecoderFactory.h",
          "objc/base/SLRRTCVideoEncoder.h",
          "objc/base/SLRRTCVideoEncoderFactory.h",
          "objc/base/SLRRTCVideoEncoderQpThresholds.h",
          "objc/base/SLRRTCVideoEncoderSettings.h",
          "objc/base/SLRRTCVideoFrame.h",
          "objc/base/SLRRTCVideoFrameBuffer.h",
          "objc/base/SLRRTCVideoRenderer.h",
          "objc/base/SLRRTCYUVPlanarBuffer.h",
          "objc/components/capturer/SLRRTCCameraVideoCapturer.h",
          "objc/components/capturer/SLRRTCFileVideoCapturer.h",
          "objc/components/renderer/metal/SLRRTCMTLNSVideoView.h",
          "objc/components/renderer/opengl/SLRRTCNSGLVideoView.h",
          "objc/components/renderer/opengl/SLRRTCVideoViewShading.h",
          "objc/components/video_codec/SLRRTCCodecSpecificInfoH264.h",
          "objc/components/video_codec/SLRRTCDefaultVideoDecoderFactory.h",
          "objc/components/video_codec/SLRRTCDefaultVideoEncoderFactory.h",
          "objc/components/video_codec/SLRRTCH264ProfileLevelId.h",
          "objc/components/video_codec/SLRRTCVideoDecoderFactoryH264.h",
          "objc/components/video_codec/SLRRTCVideoDecoderH264.h",
          "objc/components/video_codec/SLRRTCVideoEncoderFactoryH264.h",
          "objc/components/video_codec/SLRRTCVideoEncoderH264.h",
          "objc/components/video_frame_buffer/SLRRTCCVPixelBuffer.h",
          "objc/helpers/SLRRTCDispatcher.h",
        ]
        if (!build_with_chromium) {
          sources += [
            "objc/api/logging/SLRRTCCallbackLogger.h",
            "objc/api/peerconnection/SLRRTCFileLogger.h",
          ]
        }

        deps = [
          ":base_objc",
          ":default_codec_factory_objc",
          ":native_api",
          ":native_video",
          ":peerconnectionfactory_base_objc",
          ":ui_objc",
          ":videocapture_objc",
          ":videocodec_objc",
          ":videotoolbox_objc",
          "../rtc_base:rtc_base_approved",
        ]
        if (rtc_use_metal_rendering) {
          deps += [ ":metal_objc" ]
        }
        if (!build_with_chromium) {
          deps += [
            ":callback_logger_objc",
            ":file_logger_objc",
          ]
        }

        libs = [
          "AVFoundation.framework",
          "CoreGraphics.framework",
          "CoreMedia.framework",
          "OpenGL.framework",
        ]

        configs = [ "..:common_objc" ]

        public_configs = [ ":common_config_objc" ]
      }

      bundle_data("mac_framework_bundle") {
        deps = [
          "../sdk:mac_framework_objc",
        ]
        sources = [
          "$root_build_dir/SLRWebRTC.framework",
        ]
        outputs = [
          "{{bundle_contents_dir}}/Frameworks/{{source_file_part}}",
        ]
      }
    }

    rtc_static_library("wrapped_native_codec_objc") {
      sources = [
        "objc/api/video_codec/SLRRTCWrappedNativeVideoDecoder.h",
        "objc/api/video_codec/SLRRTCWrappedNativeVideoDecoder.mm",
        "objc/api/video_codec/SLRRTCWrappedNativeVideoEncoder.h",
        "objc/api/video_codec/SLRRTCWrappedNativeVideoEncoder.mm",
      ]

      configs += [ "..:common_objc" ]
      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        ":helpers_objc",
        "../api/video_codecs:video_codecs_api",
        "../media:rtc_media_base",
      ]
    }

    # The native API is currently experimental and may change without notice.
    rtc_static_library("native_api") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      sources = [
        "objc/native/api/video_capturer.h",
        "objc/native/api/video_capturer.mm",
        "objc/native/api/video_decoder_factory.h",
        "objc/native/api/video_decoder_factory.mm",
        "objc/native/api/video_encoder_factory.h",
        "objc/native/api/video_encoder_factory.mm",
        "objc/native/api/video_frame.h",
        "objc/native/api/video_frame.mm",
        "objc/native/api/video_frame_buffer.h",
        "objc/native/api/video_frame_buffer.mm",
        "objc/native/api/video_renderer.h",
        "objc/native/api/video_renderer.mm",
      ]

      configs += [ "..:common_objc" ]

      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_objc",
        ":native_video",
        ":videoframebuffer_objc",
        "../api:libjingle_peerconnection_api",
        "../api:scoped_refptr",
        "../api/video:video_frame",
        "../api/video_codecs:video_codecs_api",
        "../common_video",
        "../rtc_base:rtc_base",
        "//third_party/abseil-cpp/absl/memory",
      ]
    }

    rtc_static_library("native_video") {
      sources = [
        "objc/native/src/objc_frame_buffer.h",
        "objc/native/src/objc_frame_buffer.mm",
        "objc/native/src/objc_video_decoder_factory.h",
        "objc/native/src/objc_video_decoder_factory.mm",
        "objc/native/src/objc_video_encoder_factory.h",
        "objc/native/src/objc_video_encoder_factory.mm",
        "objc/native/src/objc_video_frame.h",
        "objc/native/src/objc_video_frame.mm",
        "objc/native/src/objc_video_renderer.h",
        "objc/native/src/objc_video_renderer.mm",
        "objc/native/src/objc_video_track_source.h",
        "objc/native/src/objc_video_track_source.mm",
      ]

      configs += [ "..:common_objc" ]

      public_configs = [ ":common_config_objc" ]

      deps = [
        ":base_native_additions_objc",
        ":base_objc",
        ":helpers_objc",
        ":videocodec_objc",
        ":videoframebuffer_objc",
        ":vpx_codec_constants",
        ":wrapped_native_codec_objc",
        "../api/video:video_frame",
        "../api/video:video_frame_i420",
        "../api/video_codecs:video_codecs_api",
        "../common_video",
        "../media:rtc_audio_video",
        "../media:rtc_media_base",
        "../modules:module_api",
        "../modules/video_coding:video_codec_interface",
        "../rtc_base:checks",
        "../rtc_base:rtc_base",
        "//third_party/abseil-cpp/absl/memory",
      ]
    }

    rtc_static_library("video_toolbox_cc") {
      visibility = [
        ":videotoolbox_objc",
        ":sdk_unittests_sources",
      ]
      sources = [
        "objc/components/video_codec/helpers.cc",
        "objc/components/video_codec/helpers.h",
        "objc/components/video_codec/nalu_rewriter.cc",
        "objc/components/video_codec/nalu_rewriter.h",
      ]
      deps = [
        "../common_video",
        "../modules:module_api",
        "../modules/video_coding:webrtc_h264",
        "../rtc_base:checks",
        "../rtc_base:rtc_base_approved",
      ]
    }

    rtc_static_library("videotoolbox_objc") {
      visibility = [ "*" ]
      allow_poison = [ "audio_codecs" ]  # TODO(bugs.webrtc.org/8396): Remove.
      sources = [
        "objc/components/video_codec/SLRRTCVideoDecoderFactoryH264.h",
        "objc/components/video_codec/SLRRTCVideoDecoderFactoryH264.m",
        "objc/components/video_codec/SLRRTCVideoDecoderH264.h",
        "objc/components/video_codec/SLRRTCVideoDecoderH264.mm",
        "objc/components/video_codec/SLRRTCVideoEncoderFactoryH264.h",
        "objc/components/video_codec/SLRRTCVideoEncoderFactoryH264.m",
        "objc/components/video_codec/SLRRTCVideoEncoderH264.h",
        "objc/components/video_codec/SLRRTCVideoEncoderH264.mm",
      ]

      configs += [
        "..:common_objc",
        ":used_from_extension",
      ]

      if (is_ios && rtc_apprtcmobile_broadcast_extension) {
        defines = [ "SLRRTC_APPRTCMOBILE_BROADCAST_EXTENSION" ]
      }

      deps = [
        ":base_native_additions_objc",
        ":base_objc",
        ":helpers_objc",
        ":video_toolbox_cc",
        ":videocodec_objc",
        ":videoframebuffer_objc",
        "../common_video",
        "../modules:module_api",
        "../modules/video_coding:video_codec_interface",
        "../rtc_base:checks",
        "../rtc_base:rtc_base_approved",
        "//third_party/libyuv",
      ]

      libs = [
        "CoreFoundation.framework",
        "CoreMedia.framework",
        "CoreVideo.framework",
        "VideoToolbox.framework",
      ]
    }
  }
}
